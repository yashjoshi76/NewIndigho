{"ast":null,"code":"import axios from \"axios\"; // Map for localStorage keys\n\nconst LOCALSTORAGE_KEYS = {\n  accessToken: \"spotify_access_token\",\n  refreshToken: \"spotify_refresh_token\",\n  expireTime: \"spotify_token_expire_time\",\n  timestamp: \"spotify_token_timestamp\"\n}; // Map to retrieve localStorage values\n\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\n\n\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  } // Navigate to homepage\n\n\n  window.location = window.location.origin;\n};\n\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === \"undefined\" || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error(\"No refresh token available\");\n      logout();\n    } // Use `/refresh_token` endpoint from our Node app\n\n\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`); // Update localStorage values\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Reload the page for localStorage updates to be reflected\n\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get(\"access_token\"),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get(\"refresh_token\"),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get(\"expires_in\")\n  };\n  const hasError = urlParams.get(\"error\"); // If there's an error OR the token in localStorage has expired, refresh the token\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === \"undefined\") {\n    refreshToken();\n  } // If there is a valid access token in localStorage, use that\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== \"undefined\") {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  } // We should never get here!\n\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\nexport const getCurrentUserProfile = () => axios.get('/me');","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","millisecondsElapsed","Date","now","Number","logout","property","removeItem","location","origin","console","error","data","get","setItem","access_token","reload","e","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","defaults","baseURL","headers","getCurrentUserProfile"],"sources":["/Users/yashjoshi/projects/monkeys/client/src/spotify.js"],"sourcesContent":["import axios from \"axios\";\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n\taccessToken: \"spotify_access_token\",\n\trefreshToken: \"spotify_refresh_token\",\n\texpireTime: \"spotify_token_expire_time\",\n\ttimestamp: \"spotify_token_timestamp\",\n};\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n\taccessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n\trefreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n\texpireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n\ttimestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\nconst hasTokenExpired = () => {\n\tconst { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n\tif (!accessToken || !timestamp) {\n\t\treturn false;\n\t}\n\tconst millisecondsElapsed = Date.now() - Number(timestamp);\n\treturn millisecondsElapsed / 1000 > Number(expireTime);\n};\n/**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\nexport const logout = () => {\n\t// Clear all localStorage items\n\tfor (const property in LOCALSTORAGE_KEYS) {\n\t\twindow.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n\t}\n\t// Navigate to homepage\n\twindow.location = window.location.origin;\n};\nconst refreshToken = async () => {\n\ttry {\n\t\t// Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n\t\tif (\n\t\t\t!LOCALSTORAGE_VALUES.refreshToken ||\n\t\t\tLOCALSTORAGE_VALUES.refreshToken === \"undefined\" ||\n\t\t\tDate.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000\n\t\t) {\n\t\t\tconsole.error(\"No refresh token available\");\n\t\t\tlogout();\n\t\t}\n\n\t\t// Use `/refresh_token` endpoint from our Node app\n\t\tconst { data } = await axios.get(\n\t\t\t`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`\n\t\t);\n\n\t\t// Update localStorage values\n\t\twindow.localStorage.setItem(\n\t\t\tLOCALSTORAGE_KEYS.accessToken,\n\t\t\tdata.access_token\n\t\t);\n\t\twindow.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\n\t\t// Reload the page for localStorage updates to be reflected\n\t\twindow.location.reload();\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n};\nconst getAccessToken = () => {\n\tconst queryString = window.location.search;\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst queryParams = {\n\t\t[LOCALSTORAGE_KEYS.accessToken]: urlParams.get(\"access_token\"),\n\t\t[LOCALSTORAGE_KEYS.refreshToken]: urlParams.get(\"refresh_token\"),\n\t\t[LOCALSTORAGE_KEYS.expireTime]: urlParams.get(\"expires_in\"),\n\t};\n\tconst hasError = urlParams.get(\"error\");\n\n\t// If there's an error OR the token in localStorage has expired, refresh the token\n\tif (\n\t\thasError ||\n\t\thasTokenExpired() ||\n\t\tLOCALSTORAGE_VALUES.accessToken === \"undefined\"\n\t) {\n\t\trefreshToken();\n\t}\n\n\t// If there is a valid access token in localStorage, use that\n\tif (\n\t\tLOCALSTORAGE_VALUES.accessToken &&\n\t\tLOCALSTORAGE_VALUES.accessToken !== \"undefined\"\n\t) {\n\t\treturn LOCALSTORAGE_VALUES.accessToken;\n\t}\n\n\t// If there is a token in the URL query params, user is logging in for the first time\n\tif (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n\t\t// Store the query params in localStorage\n\t\tfor (const property in queryParams) {\n\t\t\twindow.localStorage.setItem(property, queryParams[property]);\n\t\t}\n\t\t// Set timestamp\n\t\twindow.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\t\t// Return access token from query params\n\t\treturn queryParams[LOCALSTORAGE_KEYS.accessToken];\n\t}\n\n\t// We should never get here!\n\treturn false;\n};\n\nexport const accessToken = getAccessToken();\n\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\n\n\nexport const getCurrentUserProfile = () => axios.get('/me');"],"mappings":"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"},"metadata":{},"sourceType":"module"}