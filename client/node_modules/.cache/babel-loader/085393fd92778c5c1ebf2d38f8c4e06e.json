{"ast":null,"code":"import axios from 'axios'; // Map for localStorage keys\n\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // Map to retrieve localStorage values\n\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n\n  const millisecondsElapsed = Date.now() - Number(timestamp);\n  return millisecondsElapsed / 1000 > Number(expireTime);\n};\n/**\n* Use the refresh token in localStorage to hit the /refresh_token endpoint\n* in our Node app, then update values in localStorage with data from response.\n* @returns {void}\n*/\n\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\n\n\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  } // Navigate to homepage\n\n\n  window.location = window.location.origin;\n};\n\nconst refreshToken = async () => {\n  try {\n    // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    } // Use `/refresh_token` endpoint from our Node app\n\n\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`); // Update localStorage values\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Reload the page for localStorage updates to be reflected\n\n    window.location.reload();\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error'); // If there's an error OR the token in localStorage has expired, refresh the token\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  } // If there is a valid access token in localStorage, use that\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  } // We should never get here!\n\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","millisecondsElapsed","Date","now","Number","logout","property","removeItem","location","origin","console","error","data","get","setItem","access_token","reload","e","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError"],"sources":["/Users/yashjoshi/projects/monkeys/client/src/spotify.js"],"sourcesContent":["import axios from 'axios';\n\n\n\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n\taccessToken: 'spotify_access_token',\n\trefreshToken: 'spotify_refresh_token',\n\texpireTime: 'spotify_token_expire_time',\n\ttimestamp: 'spotify_token_timestamp',\n  }\n  \n  // Map to retrieve localStorage values\n  const LOCALSTORAGE_VALUES = {\n\taccessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n\trefreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n\texpireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n\ttimestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n  };\n\n/**\n * Handles logic for retrieving the Spotify access token from localStorage\n * or URL query params\n * @returns {string} A Spotify access token\n */\n const hasTokenExpired = () => {\n\tconst { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\n\tif (!accessToken || !timestamp) {\n\t  return false;\n\t}\n\tconst millisecondsElapsed = Date.now() - Number(timestamp);\n\treturn (millisecondsElapsed / 1000) > Number(expireTime);\n  };\n  /**\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\n * in our Node app, then update values in localStorage with data from response.\n * @returns {void}\n */\n/**\n * Clear out all localStorage items we've set and reload the page\n * @returns {void}\n */\n export const logout = () => {\n\t// Clear all localStorage items\n\tfor (const property in LOCALSTORAGE_KEYS) {\n\t  window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n\t}\n\t// Navigate to homepage\n\twindow.location = window.location.origin;\n  };\nconst refreshToken = async () => {\n\ttry {\n\t  // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n\t  if (!LOCALSTORAGE_VALUES.refreshToken ||\n\t\tLOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\n\t\t(Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\n\t  ) {\n\t\tconsole.error('No refresh token available');\n\t\tlogout();\n\t  }\n  \n\t  // Use `/refresh_token` endpoint from our Node app\n\t  const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n  \n\t  // Update localStorage values\n\t  window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n\t  window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n  \n\t  // Reload the page for localStorage updates to be reflected\n\t  window.location.reload();\n  \n\t} catch (e) {\n\t  console.error(e);\n\t}\n  };\n const getAccessToken = () => {\n\tconst queryString = window.location.search;\n\tconst urlParams = new URLSearchParams(queryString);\n\tconst queryParams = {\n\t  [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n\t  [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n\t  [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\n\t};\n\tconst hasError = urlParams.get('error');\n  \n\t// If there's an error OR the token in localStorage has expired, refresh the token\n\tif (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n\t  refreshToken();\n\t}\n  \n\t// If there is a valid access token in localStorage, use that\n\tif (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n\t  return LOCALSTORAGE_VALUES.accessToken;\n\t}\n  \n\t// If there is a token in the URL query params, user is logging in for the first time\n\tif (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n\t  // Store the query params in localStorage\n\t  for (const property in queryParams) {\n\t\twindow.localStorage.setItem(property, queryParams[property]);\n\t  }\n\t  // Set timestamp\n\t  window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n\t  // Return access token from query params\n\t  return queryParams[LOCALSTORAGE_KEYS.accessToken];\n\t}\n  \n\t// We should never get here!\n\treturn false;\n  };\n\nexport const accessToken = getAccessToken();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}